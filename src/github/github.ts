import { context, getOctokit } from '@actions/github'
import { TestRunResult } from '../client/entity.js'

export interface Config {
  token: string
}

export interface CommentConfig {
  testSuiteID: string
  testSuiteName: string
  testSuiteRunID: string
  testSuiteRunResult: TestRunResult
}

export class Github {
  private config: Config
  private core: ReturnType<typeof getOctokit>

  constructor(config: Config) {
    this.config = config

    this.core = getOctokit(config.token)
  }

  async comment(config: CommentConfig) {
    const commentIdentifier = `<!-- loggia_${config.testSuiteID} -->`

    const body = `${commentIdentifier}
# [Loggia](https://app.loggia.ai) Runner - [Test Suite - '${config.testSuiteName}'](https://app.loggia.ai/test-suites/${config.testSuiteID})

Test Suite Run Result: ${config.testSuiteRunResult} ([View details](https://app.loggia.ai/run-results/${config.testSuiteRunID})

---
_This comment was automatically generated by [Loggia GitHub Action](https://github.com/marketplace/actions/loggia-action)_
`

    // check if the comment already exists
    const comments = await this.core.rest.issues.listComments({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: context.payload.pull_request!.number
    })
    const commit = comments.data.find((comment) =>
      comment.body?.startsWith(commentIdentifier)
    )
    if (commit?.id) {
      // update the comment
      await this.core.rest.issues.updateComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        comment_id: commit.id,
        body
      })
    } else {
      // create a new comment
      await this.core.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.payload.pull_request!.number,
        body
      })
    }
  }
}
